import{a as u,d,g as y,o as w,f,s as m}from"./index-C6-j79KH.js";const p=class p{static validateEnvironment(){return!this.CLOUD_NAME||!this.API_KEY||!this.API_SECRET?(console.error("Missing required Cloudinary env vars. Ensure VITE_CLOUDINARY_CLOUD_NAME, VITE_CLOUDINARY_API_KEY, VITE_CLOUDINARY_API_SECRET are set."),!1):!0}static validateEnvironmentUnsigned(){return!!this.CLOUD_NAME&&!!this.UNSIGNED_PRESET}static async generateSignature(e){const t=Object.keys(e).filter(i=>e[i]!==void 0&&e[i]!=="").sort().map(i=>`${i}=${e[i]}`).join("&")+this.API_SECRET,o=new TextEncoder().encode(t),a=await crypto.subtle.digest("SHA-1",o);return Array.from(new Uint8Array(a)).map(i=>i.toString(16).padStart(2,"0")).join("")}static async signedUpload(e,r){var E;if(!this.validateEnvironment())return{success:!1,error:"Cloudinary configuration is incomplete"};let t;r.resourceType?t=r.resourceType:e.type==="application/pdf"?t="raw":e.type.startsWith("image/")?t="image":e.type.startsWith("video/")?t="video":t="auto";const s=Math.floor(Date.now()/1e3).toString(),o={folder:r.folder,timestamp:s};r.publicId&&(o.public_id=r.publicId),r.overwrite&&(o.overwrite="true");const a=await this.generateSignature(o),n=new FormData;n.append("file",e),n.append("api_key",this.API_KEY),Object.entries(o).forEach(([l,c])=>n.append(l,c)),n.append("signature",a);const i=`https://api.cloudinary.com/v1_1/${this.CLOUD_NAME}/${t}/upload`;try{const l=await fetch(i,{method:"POST",body:n}),c=await l.json();return l.ok?{success:!0,url:c.secure_url,public_id:c.public_id}:{success:!1,error:((E=c==null?void 0:c.error)==null?void 0:E.message)||"Upload failed"}}catch(l){return{success:!1,error:l instanceof Error?l.message:"Upload failed"}}}static async unsignedUpload(e,r){var a;if(!this.validateEnvironmentUnsigned())return{success:!1,error:"Unsigned preset not configured"};let t;r.resourceType?t=r.resourceType:e.type==="application/pdf"?t="raw":e.type.startsWith("image/")?t="image":e.type.startsWith("video/")?t="video":t="auto";const s=new FormData;s.append("file",e),s.append("upload_preset",this.UNSIGNED_PRESET),s.append("folder",r.folder),r.publicId&&s.append("public_id",r.publicId);const o=`https://api.cloudinary.com/v1_1/${this.CLOUD_NAME}/${t}/upload`;try{const n=await fetch(o,{method:"POST",body:s}),i=await n.json();return n.ok?{success:!0,url:i.secure_url,public_id:i.public_id,raw:i}:{success:!1,error:((a=i==null?void 0:i.error)==null?void 0:a.message)||"Unsigned upload failed",statusCode:n.status,raw:i}}catch(n){return{success:!1,error:n instanceof Error?n.message:"Unsigned upload failed"}}}static async uploadToCloudinary(e,r){return this.signedUpload(e,{folder:r})}static async uploadResume(e){console.log("ResumeManager.uploadResume called with:",{fileName:e.name,fileSize:e.size,fileType:e.type,cloudName:this.CLOUD_NAME,unsignedPreset:this.UNSIGNED_PRESET,hasApiKey:!!this.API_KEY,hasApiSecret:!!this.API_SECRET});const t=`resume_${Date.now()}`,s="portfolio/resume";if(this.validateEnvironment()){console.log("Attempting signed upload (prioritized for reliability)");const o=await this.signedUpload(e,{folder:s,publicId:t,resourceType:"raw"});if(console.log("Signed upload result:",o),o.success&&o.url)return o;console.warn("Signed upload failed:",o.error)}if(this.validateEnvironmentUnsigned()){console.log("Attempting unsigned upload as fallback");const o=await this.unsignedUpload(e,{folder:s,publicId:t,resourceType:"raw"});if(console.log("Unsigned upload result:",o),o.success&&o.url)return o;console.warn("Unsigned upload failed:",o.error)}return{success:!1,error:`All upload methods failed. Please check your Cloudinary configuration:
      - VITE_CLOUDINARY_CLOUD_NAME: ${this.CLOUD_NAME?"✓":"✗"}
      - VITE_CLOUDINARY_API_KEY: ${this.API_KEY?"✓":"✗"}
      - VITE_CLOUDINARY_API_SECRET: ${this.API_SECRET?"✓":"✗"}
      - VITE_CLOUDINARY_UPLOAD_PRESET: ${this.UNSIGNED_PRESET?"✓":"✗"}`}}static getResumeUrl(){return this.CLOUD_NAME?`https://res.cloudinary.com/${this.CLOUD_NAME}/raw/upload/portfolio/resume/`:null}static async testUrlAccessibility(e){try{const r=await fetch(e,{method:"HEAD"});return{accessible:r.ok,status:r.status}}catch(r){return{accessible:!1,error:r instanceof Error?r.message:"Unknown error"}}}static getPublicUrl(e,r="raw"){return this.CLOUD_NAME?`https://res.cloudinary.com/${this.CLOUD_NAME}/${r}/upload/${e}`:null}};p.CLOUD_NAME="dq8jeuqwz",p.API_KEY="873962851176992",p.API_SECRET="BdRIs_pK2gYNDzV2xEX0DOKAfOY",p.UNSIGNED_PRESET="portfolio";let h=p;class _{constructor(){this.RESUME_PATH="resume/current",this.RESUME_METADATA_PATH="metadata/resume"}async uploadResume(e,r){try{if(!e)throw new Error("No file provided");if(e.type!=="application/pdf")throw new Error("Only PDF files are supported");if(e.size>10*1024*1024)throw new Error("File size must be less than 10MB");r==null||r({loaded:0,total:e.size,percentage:0});const t=await h.uploadResume(e);if(!t.success||!t.url)throw new Error(t.error||"Failed to upload to Cloudinary");console.log("✅ Upload successful and URL should be accessible:",t.url),r==null||r({loaded:e.size*.8,total:e.size,percentage:80});const s=await this.getCurrentResume(),o=s?s.version+1:1,a={id:`resume_v${o}_${Date.now()}`,fileName:e.name,fileUrl:t.url,fileSize:e.size,uploadedAt:new Date().toISOString(),version:o,storageType:"cloudinary",publicId:t.public_id};return await this.saveResumeMetadata(a),r==null||r({loaded:e.size,total:e.size,percentage:100}),a}catch(t){if(console.error("Error uploading resume:",t),t instanceof Error){if(t.message.includes("Permission denied")||t.message.includes("PERMISSION_DENIED"))throw new Error("Permission denied. Please log in as an administrator to upload resumes.");if(t.message.includes("configuration is incomplete"))throw new Error("Cloudinary configuration is incomplete. Please check environment variables.");if(t.message.includes("Invalid Signature"))throw new Error("Cloudinary authentication failed. Please check API credentials.")}throw t instanceof Error?t:new Error("Failed to upload resume")}}async getCurrentResume(){try{const e=u(d,this.RESUME_PATH),r=await y(e);return r.exists()?r.val():null}catch(e){return console.error("Error fetching current resume:",e),e instanceof Error&&(e.message.includes("Permission denied")||e.message.includes("PERMISSION_DENIED"))&&console.warn("Resume access requires authentication. User may need to log in to manage resumes."),null}}onResumeChange(e){const r=u(d,this.RESUME_PATH);return w(r,s=>{s.exists()?e(s.val()):e(null)},s=>{console.error("Error listening to resume changes:",s),e(null)})}async deleteResume(){try{if(!await this.getCurrentResume())throw new Error("No resume found to delete");const r=u(d,this.RESUME_PATH),t=u(d,this.RESUME_METADATA_PATH);await Promise.all([f(r),f(t)]),console.log("Resume deleted successfully")}catch(e){throw console.error("Error deleting resume:",e),e instanceof Error?e:new Error("Failed to delete resume")}}async saveResumeMetadata(e){try{const r=u(d,this.RESUME_PATH),t=u(d,this.RESUME_METADATA_PATH);await m(r,e),await m(t,{url:e.fileUrl,fileName:e.fileName,lastUpdated:e.uploadedAt,version:e.version}),console.log("Resume metadata saved successfully")}catch(r){throw console.error("Error saving resume metadata:",r),r instanceof Error&&(r.message.includes("Permission denied")||r.message.includes("PERMISSION_DENIED"))?new Error("Permission denied. Please ensure you are logged in as an administrator to upload resumes."):r}}getDirectDownloadUrl(e){return e}getSimpleDownloadUrl(e){try{if(e.includes("cloudinary.com")){const r=e.split("/upload/");if(r.length===2)return`${r[0]}/upload/fl_attachment/${r[1]}`}return e}catch(r){return console.error("Error generating simple download URL:",r),e}}getBestDownloadUrl(e,r="resume.pdf"){try{if(console.log("Generating best download URL for:",{originalUrl:e,fileName:r}),e.includes("cloudinary.com")){const t=this.getSimpleDownloadUrl(e);return console.log("Generated simple download URL:",t),t}return e}catch(t){return console.error("Error generating best download URL:",t),e}}getSafeDownloadUrl(e){return e}async testUrlAccessibility(e){try{const r=await fetch(e,{method:"HEAD"});return{accessible:r.ok,status:r.status}}catch(r){return{accessible:!1,error:r instanceof Error?r.message:"Unknown error"}}}async getResumeStats(){try{const e=await this.getCurrentResume();return e?{hasResume:!0,version:e.version,lastUpdated:e.uploadedAt,fileSize:e.fileSize,storageType:e.storageType}:{hasResume:!1}}catch(e){return console.error("Error getting resume stats:",e),{hasResume:!1}}}}const U=new _;class A{constructor(){this.logs=[],this.maxLogs=100}createLogEntry(e,r,t,s){return{timestamp:new Date().toISOString(),level:e,component:r,message:t,data:s}}addLog(e){this.logs.push(e),this.logs.length>this.maxLogs&&(this.logs=this.logs.slice(-this.maxLogs))}log(e,r,t){const s=this.createLogEntry("log",e,r,t);this.addLog(s),console.log(`[${e}] ${r}`,t||"")}warn(e,r,t){const s=this.createLogEntry("warn",e,r,t);this.addLog(s),console.warn(`[${e}] ${r}`,t||"")}error(e,r,t){const s=this.createLogEntry("error",e,r,t);this.addLog(s),console.error(`[${e}] ${r}`,t||"")}info(e,r,t){const s=this.createLogEntry("info",e,r,t);this.addLog(s),console.info(`[${e}] ${r}`,t||"")}getLogs(e,r){let t=this.logs;return e&&(t=t.filter(s=>s.level===e)),r&&(t=t.filter(s=>s.component===r)),t}clearLogs(){this.logs=[]}exportLogs(){return JSON.stringify(this.logs,null,2)}}const S=new A;export{h as R,S as l,U as u};
